// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Multi-tenancy support
model Tenant {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  email       String
  phone       String?
  cnpj        String?
  address     String?
  
  // Subscription info
  plan        TenantPlan @default(STARTER)
  isActive    Boolean    @default(true)
  
  // Billing
  subscriptionId String?
  trialEndsAt    DateTime?
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  users         User[]
  clients       Client[]
  boletos       Boleto[]
  reminders     Reminder[]
  settings      TenantSettings?
  whatsappInstances WhatsAppInstance[]
  fileUploads   FileUpload[]
  payments      Payment[]
  messageTemplates MessageTemplate[]
  reminderHistories ReminderHistory[]
  pushNotificationTokens PushNotificationToken[]
  pushNotificationLogs PushNotificationLog[]

  @@map("tenants")
}

// Tenant-specific settings
model TenantSettings {
  id                    String  @id @default(cuid())
  tenantId              String  @unique
  tenant                Tenant  @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  
  // Reminder settings
  reminderDaysBefore    Int     @default(3)
  reminderTemplate      String  @db.Text
  sendSecondReminder    Boolean @default(false)
  secondReminderDays    Int     @default(1)
  enableAutoReminders   Boolean @default(true)
  
  // WhatsApp settings
  whatsappEnabled       Boolean @default(false)
  whatsappInstanceId    String?
  
  // Email settings
  emailEnabled          Boolean @default(false)
  smtpHost              String?
  smtpPort              Int?
  smtpUser              String?
  smtpPassword          String?
  
  // Notification settings
  notifyOnPayment       Boolean @default(true)
  notifyOnOverdue       Boolean @default(true)
  
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  @@map("tenant_settings")
}

// NextAuth.js models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole  @default(USER)
  
  // Multi-tenancy
  tenantId      String
  tenant        Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]

  @@index([tenantId])
  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Business models
model Client {
  id        String   @id @default(cuid())
  tenantId  String
  tenant    Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  
  name      String
  cpfCnpj   String
  whatsapp  String?
  email     String?
  address   String?
  city      String?
  state     String?
  zipCode   String?
  
  isActive  Boolean  @default(true)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  boletos   Boleto[]

  @@unique([tenantId, cpfCnpj])
  @@index([tenantId, name])
  @@map("clients")
}

model Boleto {
  id            String      @id @default(cuid())
  tenantId      String
  tenant        Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  clientId      String
  client        Client      @relation(fields: [clientId], references: [id], onDelete: Cascade)
  
  nossoNumero   String      @unique
  amount        Decimal     @db.Decimal(10, 2)
  dueDate       DateTime
  description   String?
  
  // Payment tracking
  isPaid        Boolean     @default(false)
  paidAt        DateTime?
  paidAmount    Decimal?    @db.Decimal(10, 2)
  
  // Status
  status        BoletoStatus @default(PENDING)
  
  // Metadata
  metadata      Json?
  
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  // Relations
  reminders     Reminder[]
  reminderHistories ReminderHistory[]

  @@index([tenantId, dueDate])
  @@index([tenantId, status])
  @@index([clientId])
  @@map("boletos")
}

model Reminder {
  id          String         @id @default(cuid())
  tenantId    String
  tenant      Tenant         @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  boletoId    String
  boleto      Boleto         @relation(fields: [boletoId], references: [id], onDelete: Cascade)
  
  type        ReminderType
  scheduledAt DateTime
  sentAt      DateTime?
  status      ReminderStatus @default(PENDING)
  
  // Message content
  message     String         @db.Text
  channel     NotificationChannel
  recipient   String         // phone, email, etc
  
  // Delivery tracking
  deliveredAt DateTime?
  readAt      DateTime?
  
  // Error tracking
  error       String?
  retryCount  Int            @default(0)
  
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  @@index([tenantId, scheduledAt])
  @@index([status, scheduledAt])
  @@map("reminders")
}

// WhatsApp Integration
model WhatsAppInstance {
  id           String        @id @default(cuid())
  tenantId     String
  tenant       Tenant        @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  
  instanceName String
  status       InstanceStatus @default(DISCONNECTED)
  qrCode       String?       @db.Text
  
  isDefault    Boolean  @default(false)
  isActive     Boolean  @default(true)
  
  // Evolution API specific
  evolutionInstanceId String? // ID no Evolution API
  webhookUrl          String?
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  reminderHistories ReminderHistory[]

  @@unique([tenantId, instanceName])
  @@map("whatsapp_instances")
}

// File upload tracking
model FileUpload {
  id          String   @id @default(cuid())
  tenantId    String
  fileName    String
  originalName String
  fileSize    Int
  mimeType    String
  uploadPath  String
  
  // Processing status
  status      FileStatus @default(UPLOADED)
  recordsTotal Int       @default(0)
  recordsProcessed Int   @default(0)
  errorCount  Int        @default(0)
  errorDetails Json?
  
  processedAt DateTime?
  createdAt   DateTime  @default(now())

  @@index([tenantId, createdAt])
  @@map("file_uploads")
}

// Payment tracking for billing
model Payment {
  id              String      @id @default(cuid())
  tenantId        String
  tenant          Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  
  plan            String      // STARTER, PROFESSIONAL, ENTERPRISE
  amount          Decimal     @db.Decimal(10, 2)
  paymentMethod   String      // credit_card, pix, boleto
  status          PaymentStatus @default(PENDING)
  
  transactionId   String?     @unique
  externalId      String?     // ID from payment gateway
  
  // Payment details
  paidAt          DateTime?
  expiresAt       DateTime?   // For boleto/pix
  
  // Metadata (card info, etc)
  metadata        Json?
  
  // Error tracking
  errorMessage    String?
  
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  @@index([tenantId, createdAt])
  @@index([status, expiresAt])
  @@map("payments")
}

// Enums
enum TenantPlan {
  STARTER
  PROFESSIONAL
  BUSINESS
  ENTERPRISE
}

enum UserRole {
  ADMIN
  USER
  VIEWER
}

enum BoletoStatus {
  PENDING
  SENT
  PAID
  OVERDUE
  CANCELLED
}

enum ReminderType {
  FIRST_REMINDER
  SECOND_REMINDER
  OVERDUE
  CUSTOM
}

enum ReminderStatus {
  PENDING
  SENT
  DELIVERED
  FAILED
  CANCELLED
}

enum NotificationChannel {
  WHATSAPP
  EMAIL
  SMS
}

enum InstanceStatus {
  DISCONNECTED
  CONNECTING
  CONNECTED
  ERROR
}

enum FileStatus {
  UPLOADED
  PROCESSING
  COMPLETED
  ERROR
}

enum PaymentStatus {
  PENDING
  PROCESSING
  APPROVED
  REJECTED
  CANCELLED
  EXPIRED
}

// Message templates for reminders
model MessageTemplate {
  id          String   @id @default(cuid())
  tenantId    String
  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  
  name        String
  type        ReminderType
  content     String   @db.Text
  isDefault   Boolean  @default(false)
  isActive    Boolean  @default(true)
  
  variables   Json?    // Available template variables
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([tenantId, type])
  @@map("message_templates")
}

// Reminder history for tracking sent messages
model ReminderHistory {
  id                  String   @id @default(cuid())
  tenantId            String
  tenant              Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  boletoId            String
  boleto              Boleto   @relation(fields: [boletoId], references: [id], onDelete: Cascade)
  
  reminderType        String   // 'before_due', 'overdue', 'manual'
  status              String   // 'sent', 'failed', 'delivered'
  message             String   @db.Text
  
  // WhatsApp integration
  whatsappInstanceId  String?
  whatsappInstance    WhatsAppInstance? @relation(fields: [whatsappInstanceId], references: [id])
  messageId           String?  // Evolution API message ID
  
  sentAt              DateTime @default(now())
  deliveredAt         DateTime?
  
  // Error tracking
  error               String?
  
  createdAt           DateTime @default(now())

  @@index([tenantId, sentAt])
  @@index([boletoId, reminderType])
  @@map("reminder_history")
}

// Push notification tokens for FCM
model PushNotificationToken {
  id          String   @id @default(cuid())
  tenantId    String
  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  
  token       String   // FCM registration token
  deviceInfo  Json?    // Device information (user agent, etc)
  isActive    Boolean  @default(true)
  lastUsed    DateTime @default(now())
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([tenantId, token])
  @@index([tenantId, isActive])
  @@map("push_notification_tokens")
}

// Push notification logs
model PushNotificationLog {
  id           String   @id @default(cuid())
  tenantId     String
  tenant       Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  
  title        String
  body         String   @db.Text
  targetCount  Int      // Number of tokens targeted
  successCount Int      // Number of successful sends
  failureCount Int      // Number of failed sends
  
  data         String?  @db.Text // Additional data sent with notification
  
  sentAt       DateTime @default(now())

  @@index([tenantId, sentAt])
  @@map("push_notification_logs")
}